"use strict";(()=>{var e={};e.id=6926,e.ids=[6926],e.modules={72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},39491:e=>{e.exports=require("assert")},14300:e=>{e.exports=require("buffer")},6113:e=>{e.exports=require("crypto")},82361:e=>{e.exports=require("events")},13685:e=>{e.exports=require("http")},95687:e=>{e.exports=require("https")},85477:e=>{e.exports=require("punycode")},63477:e=>{e.exports=require("querystring")},12781:e=>{e.exports=require("stream")},57310:e=>{e.exports=require("url")},73837:e=>{e.exports=require("util")},59796:e=>{e.exports=require("zlib")},23554:(e,r,t)=>{t.r(r),t.d(r,{headerHooks:()=>y,originalPathname:()=>_,requestAsyncStorage:()=>d,routeModule:()=>m,serverHooks:()=>c,staticGenerationAsyncStorage:()=>f,staticGenerationBailout:()=>g});var o={};t.r(o),t.d(o,{POST:()=>u}),t(95655);var s=t(83323),a=t(54647),n=t(66886),p=t(3471),i=t(93439);async function u(e){try{let r,t;let o=await (0,p.getServerSession)();if(!o?.user?.email)return n.Z.json({error:"Unauthorized"},{status:401});let{data:s,error:a}=await i.p.from("users").select("id, subscription_type, payment_proof_url").eq("email",o.user.email).single();if(a||!s)return console.error("User fetch error:",a),n.Z.json({error:"User not found"},{status:404});if(!s.subscription_type)return n.Z.json({error:"No subscription selected"},{status:400});let u=e.headers.get("content-type");if(u?.includes("application/json")){let{payment_proof_url:t}=await e.json();if(!t)return n.Z.json({error:"No payment proof URL provided"},{status:400});if(r=t,s.payment_proof_url&&s.payment_proof_url!==r)try{console.log("Deleting old payment proof:",s.payment_proof_url);let e=[i.p.storage.from("payment-proofs").remove([s.payment_proof_url]),i.O.storage.from("payment-proofs").remove([s.payment_proof_url])];await Promise.allSettled(e),console.log("Old payment proof deletion attempted")}catch(e){console.log("Error deleting old payment proof:",e)}}else{let t=await e.formData(),o=t.get("file");if(!o)return n.Z.json({error:"No file provided"},{status:400});if(!o.type.startsWith("image/"))return n.Z.json({error:"Please select an image file."},{status:400});if(o.size>10485760)return n.Z.json({error:"Image must be less than 10MB."},{status:400});let a=o.name.split(".").pop(),p=`payment_proof_${s.id}_${Date.now()}.${a}`;if(s.payment_proof_url)try{console.log("Deleting old payment proof file:",s.payment_proof_url);let e=[i.p.storage.from("payment-proofs").remove([s.payment_proof_url]),i.O.storage.from("payment-proofs").remove([s.payment_proof_url])];await Promise.allSettled(e)}catch(e){console.log("Could not delete old payment proof:",e)}let{error:u}=await i.p.storage.from("payment-proofs").upload(p,o,{cacheControl:"3600",upsert:!0});if(u)return console.error("Upload error:",u),n.Z.json({error:`Failed to upload payment proof: ${u.message}`},{status:500});r=p}let{data:l}=await i.p.from("payments").select("id").eq("user_id",s.id).single(),m={user_id:s.id,amount:"premium"===s.subscription_type?249:99,payment_method:"upi",status:"pending",subscription_type:s.subscription_type,payment_proof_url:r,updated_at:new Date().toISOString()};if(l){let{data:e,error:r}=await i.p.from("payments").update(m).eq("id",l.id).select().single();if(r)return console.error("Payment update error:",r),n.Z.json({error:`Failed to update payment record: ${r.message}`},{status:500});t=e}else{let{data:e,error:r}=await i.p.from("payments").insert(m).select().single();if(r)return console.error("Payment record error:",r),n.Z.json({error:`Failed to create payment record: ${r.message}`},{status:500});t=e}let{error:d}=await i.p.from("users").update({payment_proof_url:r,payment_confirmed:!1,subscription_status:"pending"}).eq("id",s.id);if(d)return console.error("User update error:",d),n.Z.json({error:`Failed to update user profile: ${d.message}`},{status:500});return console.log(`Payment proof updated successfully for user ${s.id}: ${r}`),n.Z.json({message:"Payment proof uploaded successfully",payment:t,payment_proof_url:r,success:!0})}catch(e){return console.error("Payment proof upload error:",e),n.Z.json({error:"Internal server error"},{status:500})}}let l=s.AppRouteRouteModule,m=new l({definition:{kind:a.x.APP_ROUTE,page:"/api/user/payment-proof/route",pathname:"/api/user/payment-proof",filename:"route",bundlePath:"app/api/user/payment-proof/route"},resolvedPagePath:"/home/aman/Desktop/cufy_3.1v-1/app/api/user/payment-proof/route.ts",nextConfigOutput:"",userland:o}),{requestAsyncStorage:d,staticGenerationAsyncStorage:f,serverHooks:c,headerHooks:y,staticGenerationBailout:g}=m,_="/api/user/payment-proof/route"}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),o=r.X(0,[9195,5020,6886,3433,3810,3471,7221],()=>t(23554));module.exports=o})();